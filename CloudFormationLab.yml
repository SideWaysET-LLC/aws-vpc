#Tina Liu Feb 5, 2020
# Usage:
    #   aws cloudformation --region <region> create-stack --stack-name <stack name> --template-body file://vpc-fargate.yaml
    
    # This template will create:
    #   A VPC with:
    #       1 Public Subnet
    #       1 Private Subnet
    #   An Internet Gateway (with routes to it for Public Subnet)
    #   And Route Table + Route + Route Table Associaions for each subnet   
    #     
    Resources:
      PubPrivateVPC: #all VpcID !Ref to here
        Type: 'AWS::EC2::VPC'
        Properties:
          CidrBlock: 172.31.0.0/16 #size of VPC /16 largest /28 smallest
     
      PublicSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref PubPrivateVPC 
          CidrBlock: 172.31.1.0/24
          MapPublicIpOnLaunch: true #gives a public IPv4 address thus making it public subnet
     
      PrivateSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref PubPrivateVPC
          CidrBlock: 172.31.3.0/24
          MapPublicIpOnLaunch: false #does not give a public IPv4 address
      
      InternetGateway:
        Type: 'AWS::EC2::InternetGateway' #creates gateway, no properties necessary 
      
      VPCGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment' #conects internet and VPC using gateway
        Properties:
          VpcId: !Ref PubPrivateVPC
          InternetGatewayId: !Ref InternetGateway
      
      PublicRouteTable:
        Type: 'AWS::EC2::RouteTable' #route table to hold associations between routes and subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PublicRoute:
        Type: 'AWS::EC2::Route' #specifies route in route table 
        DependsOn: VPCGatewayAttachment
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
     
      PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation' #associates a subnet with a route table
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
      PrivateRouteTable:
        Type: 'AWS::EC2::RouteTable' 
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PrivateRoute:
        Type: 'AWS::EC2::Route' 
        Properties:
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          #no GatewayID because no access to internet makes it private
     
      PrivateSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation' 
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable #best practice to connect to route table instead of leaving it undeclared
      